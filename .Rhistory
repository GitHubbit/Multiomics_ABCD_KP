"Var1" = "Aliases")
# find rows in test that are not in vis_meta
extra_rows <- vis_meta[duplicated(vis_meta[,c("Var1", "Var2")]),]
# NOW add the column descriptions and table names
vis_meta <- vis
colnames(vis_meta)[colnames(vis_meta) == "Var1"] ="ElementName"
vis_meta <- vis_meta %>% left_join(abcd_dict[, c("ElementName", "table_name", "ElementDescription", "Notes")], by="ElementName")
# rename cols so they correspond to the right variable
vis_meta <- vis_meta %>% rename("Var1_tablename" = "table_name",
"Var1_description" = "ElementDescription",
"Var1_notes" = "Notes",
"Var1" = "ElementName")
# repeat for Var2
colnames(vis_meta)[colnames(vis_meta) == "Var2"] ="ElementName"
vis_meta <- vis_meta %>% left_join(abcd_dict[, c("ElementName", "table_name", "ElementDescription", "Notes")], by="ElementName")
# rename cols so they correspond to the right variable
vis_meta <- vis_meta %>% rename("Var2_tablename" = "table_name",
"Var2_description" = "ElementDescription",
"Var2_notes" = "Notes",
"Var2" = "ElementName")
# conduct mapping for "Var1" column using ALIASES now
# JOIN BY ELEMENT DESCRIPTION AND TABLE NAME (when this is done, the KG blows up bc there is a column (interview_age) of same name in multiple tables)
# for clarity, see code between star dashes below
# ------- @@@ ------- !!!!!------- @@@ ------- !!!!!------- @@@ ------- !!!!!------- @@@ ------- !!!!!
colnames(vis_meta)[colnames(vis_meta) == "Var1"] ="Aliases"
vis_meta <- vis_meta %>% left_join(abcd_dict[, c("Aliases", "table_name", "ElementDescription", "Notes")], by="Aliases")
# rename cols
vis_meta <- vis_meta %>%
rename("Var1_Alias_tablename" = "table_name",
"Var1_Alias_description" = "ElementDescription",
"Var1_Alias_notes" = "Notes",
"Var1" = "Aliases")
# find rows in test that are not in vis_meta
extra_rows <- vis_meta[duplicated(vis_meta[,c("Var1", "Var2")]),]
# check if an individual row in extra_rows is in vis_meta, see if they're actually duplicates
dup1 <- vis_meta[vis_meta$Var1 == 'reshist_addr2_pm25_2016_annual_avg' & vis_meta$Var2 == 'reshist_addr2_adi_edu_h',] # yes, there are duplicates
# remove duplicates
vis_meta <- vis_meta[!duplicated(t(apply(vis_meta[c("Var1", "Var2")], 1, sort))), ]
# repeat the same for Var2
colnames(vis_meta)[colnames(vis_meta) == "Var2"] ="Aliases"
vis_meta <- vis_meta %>% left_join(abcd_dict[, c("Aliases", "table_name", "ElementDescription", "Notes")], by="Aliases")
# rename cols
vis_meta <- vis_meta %>%
rename("Var2_Alias_tablename" = "table_name",
"Var2_Alias_description" = "ElementDescription",
"Var2_Alias_notes" = "Notes",
"Var2" = "Aliases")
# find rows in test that are not in vis_meta
extra_rows <- vis_meta[duplicated(vis_meta[,c("Var1", "Var2")]),]
# check if an individual row in extra_rows is in vis_meta, see if they're actually duplicates
dup1 <- vis_meta[vis_meta$Var1 == 'reshist_addr2_pm25_2016_annual_avg' & vis_meta$Var2 == 'reshist_addr2_adi_edu_h',] # yes, there are duplicates
# remove duplicates
vis_meta <- vis_meta[!duplicated(t(apply(vis_meta[c("Var1", "Var2")], 1, sort))), ]
# doing for Var1_tablename column
colnames(vis_meta)[colnames(vis_meta) == "Var1_tablename"] ="table_name"
vis_meta <- vis_meta %>% left_join(table_details, by="table_name")
# rename cols
vis_meta <- vis_meta %>%
rename("Var1_tablename" = "table_name",
"Var1_table_description" = "table_description")
# doing for Var2_tablename column
colnames(vis_meta)[colnames(vis_meta) == "Var2_tablename"] ="table_name"
vis_meta <- vis_meta %>% left_join(table_details, by="table_name")
# rename cols
vis_meta <- vis_meta %>%
rename("Var2_tablename" = "table_name",
"Var2_table_description" = "table_description")
# doing for Var1_Alias_tablename column
colnames(vis_meta)[colnames(vis_meta) == "Var1_Alias_tablename"] ="table_name"
vis_meta <- vis_meta %>% left_join(table_details, by="table_name")
# rename cols
vis_meta <- vis_meta %>%
rename("Var1_Alias_tablename" = "table_name",
"Var1_Alias_table_description" = "table_description")
# doing for Var2_Alias_tablename column
colnames(vis_meta)[colnames(vis_meta) == "Var2_Alias_tablename"] ="table_name"
vis_meta <- vis_meta %>% left_join(table_details, by="table_name")
# rename cols
vis_meta <- vis_meta %>%
rename("Var2_Alias_tablename" = "table_name",
"Var2_Alias_table_description" = "table_description")
# DOING VAR1
vis_meta$Var1_tablename <- ifelse(vis_meta$Var1_tablename == '' | is.na(vis_meta$Var1_tablename),
vis_meta$Var1_Alias_tablename, vis_meta$Var1_tablename)
vis_meta <- subset(vis_meta, select = -Var1_Alias_tablename)
vis_meta$Var1_description <- ifelse(vis_meta$Var1_description == '' | is.na(vis_meta$Var1_description),
vis_meta$Var1_Alias_description, vis_meta$Var1_description)
vis_meta <- subset(vis_meta, select = -Var1_Alias_description)
vis_meta$Var1_notes <- ifelse(vis_meta$Var1_notes == '' | is.na(vis_meta$Var1_notes),
vis_meta$Var1_Alias_notes, vis_meta$Var1_notes)
vis_meta <- subset(vis_meta, select = -Var1_Alias_notes)
vis_meta$Var1_table_description <- ifelse(vis_meta$Var1_table_description == '' | is.na(vis_meta$Var1_table_description),
vis_meta$Var1_Alias_table_description, vis_meta$Var1_table_description)
vis_meta <- subset(vis_meta, select = -Var1_Alias_table_description)
# REPEAT FOR VAR2
vis_meta$Var2_tablename <- ifelse(vis_meta$Var2_tablename == '' | is.na(vis_meta$Var2_tablename),
vis_meta$Var2_Alias_tablename, vis_meta$Var2_tablename)
vis_meta <- subset(vis_meta, select = -Var2_Alias_tablename)
vis_meta$Var2_description <- ifelse(vis_meta$Var2_description == '' | is.na(vis_meta$Var2_description),
vis_meta$Var2_Alias_description, vis_meta$Var2_description)
vis_meta <- subset(vis_meta, select = -Var2_Alias_description)
vis_meta$Var2_notes <- ifelse(vis_meta$Var2_notes == '' | is.na(vis_meta$Var2_notes),
vis_meta$Var2_Alias_notes, vis_meta$Var2_notes)
vis_meta <- subset(vis_meta, select = -Var2_Alias_notes)
vis_meta$Var2_table_description <- ifelse(vis_meta$Var2_table_description == '' | is.na(vis_meta$Var2_table_description),
vis_meta$Var2_Alias_table_description, vis_meta$Var2_table_description)
vis_meta <- subset(vis_meta, select = -Var2_Alias_table_description)
# trim whitespace
vis_meta <- vis_meta %>% mutate(across(where(is.character), str_trim))
write.table(vis_meta, 'correlations_with_Alias_metadata.txt',
append = FALSE,
quote=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
setwd(script_dir)
# write correlations with metadata (table descriptions and column descriptions to output file)
sub_dir <- "outputs"
setwd(script_dir)
if (file.exists(file.path("..", sub_dir))){
# specifying the working directory
setwd(file.path("..", sub_dir))
write.table(vis_meta, 'correlations_with_metadata.txt',
append = FALSE,
quote=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
setwd(script_dir)
} else {
# create a new sub directory inside the ABCD folder
dir.create(file.path("..", sub_dir))
# specifying the working directory
setwd(file.path("..", sub_dir))
write.table(vis_meta, 'correlations_with_metadata.txt',
append = FALSE,
quote=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
setwd(script_dir)
}
View(corr_mat)
corr_mat[["r"]]
# make vis_meta dataframe into edges dataframe
# subject, predicate, object, subject_name, object_name, category, attributes
edges <- vis_meta %>% rename("subject" = "Var1",
"object" = "Var2",
"subject_name" = "Var1_description",
"object_name" = "Var2_description",
"subject_table_name" = "Var1_tablename",
"object_table_name" = "Var2_tablename",
"subject_table_description" = "Var1_table_description",
"object_table_description" = "Var2_table_description",
"subject_notes" = "Var1_notes",
"object_notes" =  "Var2_notes"
)
edges$predicate <- "biolink:correlated_with"
edges$category <- "biolink:SocioeconomicExposure"
View(edges)
# make edges dataframe into nodes dataframe
nodes1 <- edges %>% distinct(subject, subject_name) %>% rename("id" = "subject", "name" = "subject_name")
nodes2 <- edges %>% distinct(object, object_name) %>% rename("id" = "object", "name" = "object_name")
nodes <- rbind(nodes1, nodes2)
rm(nodes1, nodes2)
nodes <- nodes[!duplicated(nodes[ , "id"]), ]
nodes$category <- "biolink:SocioeconomicExposure"
View(nodes)
# write edges and nodes output files for KG
sub_dir <- "outputs"
setwd(script_dir)
if (file.exists(file.path("..", sub_dir))){
# specifying the working directory
setwd(file.path("..", sub_dir))
# write edges output file
write.table(edges, 'ABCD_numerical_KG_edges.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write nodes output file
write.table(nodes, 'ABCD_numerical_KG_nodes.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
setwd(script_dir)
} else {
# create a new sub directory inside the ABCD folder
dir.create(file.path("..", sub_dir))
# specifying the working directory
setwd(file.path("..", sub_dir))
write.table(edges, 'ABCD_numerical_KG_edges.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# make nodes file
write.table(nodes, 'ABCD_numerical_KG_nodes.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
setwd(script_dir)
}
# write edges, nodes, and edges_dtab (for Cytoscape network visualization) output files for KG
sub_dir <- "outputs"
setwd(script_dir)
if (file.exists(file.path("..", sub_dir))){
# specifying the working directory
setwd(file.path("..", sub_dir))
# write edges output file
write.table(edges, 'ABCD_numerical_KG_edges.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write nodes output file
write.table(nodes, 'ABCD_numerical_KG_nodes.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write all of the various correlation tables to a CSV to open in Cytoscape as a network
write.csv(edges_dtab,
file='ABCD_correlations_inter_table.csv',
row.names=FALSE)
setwd(script_dir)
} else {
# create a new sub directory inside the ABCD folder
dir.create(file.path("..", sub_dir))
# specifying the working directory
setwd(file.path("..", sub_dir))
write.table(edges, 'ABCD_numerical_KG_edges.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# make nodes file
write.table(nodes, 'ABCD_numerical_KG_nodes.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write all of the various correlation tables to a CSV to open in Cytoscape as a network
write.csv(edges_dtab,
file='ABCD_correlations_inter_table.csv',
row.names=FALSE)
setwd(script_dir)
}
# capture correlations that are not in the same table (i.g. correlations between Table 1 and any other table besides Table 1, and so on...)
edges_dtab <- edges[which(edges$subject_table_name != edges$object_table_name),] # table of different-table correlations
# write edges, nodes, and edges_dtab (for Cytoscape network visualization) output files for KG
sub_dir <- "outputs"
setwd(script_dir)
if (file.exists(file.path("..", sub_dir))){
# specifying the working directory
setwd(file.path("..", sub_dir))
# write edges output file
write.table(edges, 'ABCD_numerical_KG_edges.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write nodes output file
write.table(nodes, 'ABCD_numerical_KG_nodes.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write all of the various correlation tables to a CSV to open in Cytoscape as a network
write.csv(edges_dtab,
file='ABCD_correlations_inter_table.csv',
row.names=FALSE)
setwd(script_dir)
} else {
# create a new sub directory inside the ABCD folder
dir.create(file.path("..", sub_dir))
# specifying the working directory
setwd(file.path("..", sub_dir))
write.table(edges, 'ABCD_numerical_KG_edges.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# make nodes file
write.table(nodes, 'ABCD_numerical_KG_nodes.txt',
append = FALSE,
quote=FALSE,
row.names=FALSE,
sep = "\t",
dec = ".",
col.names = TRUE)
# write all of the various correlation tables to a CSV to open in Cytoscape as a network
write.csv(edges_dtab,
file='ABCD_correlations_inter_table.csv',
row.names=FALSE)
setwd(script_dir)
}
renv::(init)
renv::init()
renv::snapshot()
.libPaths()
install.packages("librarian")
install.packages("librarian")
install.packages("data.table")
install.packages("R.utils")
install.packages("tidyverse")
install.packages("tiydr")
install.packages("tidyr")
# ETL of ABCD Data
# note, this will generate KG of UNMAPPED ABCD data
rm(list=ls())
# setwd('/Users/Kamileh/Work/ISB/NCATS_BiomedicalTranslator/Projects/ABCD/scripts/R') # comment for hypatia
script_dir <- getwd() # comment for local  # ---> SHOULD BE SET TO DIR THAT SCRIPT IS IN
data_dir <- "data" # comment for local
data_rds <- "../data/ABCD_release_2.0_rds/ABCD_releases_2.0.1_Rds/nda2.0.1.Rds" # comment for local
ABCD_DEAP_2.0_dictionary <- "../data/ABCDstudyDEAP_2.0/dictionary" # comment for local
deap_aliases_updated <- '../data/ABCD_release_2.0_rds/ABCD_releases_2.0.1_Rds/DEAP.aliases.updated.2.0.1.csv' # comment for local
install.packages("librarian")
librarian::shelf("data.table", "R.utils", "tidyverse",
"tidyr", "stringr", "tibble",
"corrplot", "Hmisc", "ggplot2",
"RColorBrewer", "rvest", "utils",
"futile.logger", "renv")
renv::install("data.table")
renv:install("R.utils")
renv::install("R.utils")
renv::install("tidyverse")
renv::install("tidyr")
renv::install("stringr")
renv::install("tibble")
renv::install("corrplot")
renv::install("Hmisc")
renv::install("ggplot2")
renv::install("RColorBrewer")
renv::install("rvest")
renv::install("utils")
renv::install("futile.logger")
renv::install("renv")
renv::snapshot()
find.package("data.table")
getwd()
# ETL of ABCD Data
# note, this will generate KG of UNMAPPED ABCD data
rm(list=ls())
# setwd('/Users/Kamileh/Work/ISB/NCATS_BiomedicalTranslator/Projects/ABCD/scripts/R') # comment for hypatia
script_dir <- getwd() # comment for local  # ---> SHOULD BE SET TO DIR THAT SCRIPT IS IN
data_dir <- "data" # comment for local
data_rds <- "../data/ABCD_release_2.0_rds/ABCD_releases_2.0.1_Rds/nda2.0.1.Rds" # comment for local
ABCD_DEAP_2.0_dictionary <- "../data/ABCDstudyDEAP_2.0/dictionary" # comment for local
deap_aliases_updated <- '../data/ABCD_release_2.0_rds/ABCD_releases_2.0.1_Rds/DEAP.aliases.updated.2.0.1.csv' # comment for local
install.packages("librarian")
librarian::shelf("data.table", "R.utils", "tidyverse",
"tidyr", "stringr", "tibble",
"corrplot", "Hmisc", "ggplot2",
"RColorBrewer", "rvest", "utils",
"futile.logger", "renv")
# read in the RDS file
# abcd3 <- readRDS("/Volumes/TOSHIBA_EXT/ISB/ABCD/data/ABCD_release_2.0_rds/ABCD_releases_2.0.1_Rds/nda2.0.1.Rds") # comment for hypatia
abcd3 <- readRDS(file.path(data_rds))  # comment for local
getwd()
# we need the descriptions of the tables bc the data dictionary isn't informative enough about what the column names/nodes in network mean
# web scrape the NIMH (https://nda.nih.gov/data_dictionary.html?source=ABCD%2BRelease%2B2.0&submission=ALL) data dictionary table descriptions to get better understanding of what column means
setwd(script_dir)
abcd_data_dict_2_url <- "https://nda.nih.gov/data_dictionary.html?source=ABCD%2BRelease%2B2.0&submission=ALL"
getwd()
getwd()
# get only baseline readings
abcd_baseline <- abcd3[abcd3$eventname %like% "baseline", ]
# get a subset of data easier to work with (get only baseline readings)
# abcd_sub <- abcd_baseline[1:5000,]
abcd_sub <- abcd_baseline
rm(abcd3, abcd_baseline) # remove big data, work with subset
# retrieve data dictionary so we know what we're looking at
# dict_files <- list.files(path="/Volumes/TOSHIBA_EXT/ISB/ABCD/data/ABCDstudyDEAP_2.0/dictionary", pattern=".csv", full.names=T) # comment for hypatia
dict_files <- list.files(path=ABCD_DEAP_2.0_dictionary, pattern=".csv", full.names=T) # comment for local
parse_dict_file <- function(file) {
return(tryCatch(read.csv(file) %>% add_column(table_name=sub('\\.csv$', '', basename(file)), .before=1), error=function(e) NULL))
# print(basename(file))
# return(tryCatch(read.csv(file), error=function(e) NULL))
}
# see column types of abcd dataframe
cols_types <- unique(sapply(abcd_sub, typeof)) # there's only double and string
abcd_dict <- lapply(dict_files, parse_dict_file)
abcd_dict <- rbindlist(abcd_dict, fill=T)
types_in_df <- data.frame(sapply(abcd_sub, class))  # get the types of all the columns in the abcd dataset
# grab columns of relevance
selected_cols <-  abcd_dict %>% filter(DataType == "Float" |
ElementName == "anthroheightcalc|anthroweightcalc" |
# grepl("_t$", ElementName) |  # there's a lot of ElementNames that end in _t that aren't t_scores and I only want t_scores
grepl("t-score|T-Score|T-score|Mean|mean", ElementDescription) |
ElementDescription %like% "how much|How much|how many|How many|how long|How long" |
table_name == "abcd_otbi01" & grepl("age|old", ElementDescription) |
table_name == "abcd_ps01" & DataType=="Integer" |
table_name == "abcd_saiq02" & grepl("how many years", ElementDescription) |
table_name == "abcd_tbi01" & grepl("SUM", ElementDescription) |
# table_name == "abcd_tbss01" & grepl("agecorrected", ElementName)  # they computed T-scores later
table_name == "abcd_y10ids01" & grepl("How many times", ElementDescription) |
table_name == "abcd_yhr01" & grepl("ng/10 mg hair", ElementDescription) |
table_name == "stq01" & grepl("ng/10 mg hair", ElementDescription)
# table_name == "abcd_yrb01" & grepl("how many", ElementDescription) |
# table_name == "abcd_ysr01" & grepl("how many", ElementDescription)
)
# filter out MRI and other variables that are not float/numerical
selected_cols <- selected_cols %>% filter(!grepl("mri|ehi_y_ss_scoreb|rep1|rep2|rep3|hair_results_lan|hair_results_entityid|hair_results_clientcode|hair_results_section_begin|hair_results_section_end|_nt$|_nm$", ElementName))
selected_cols <- selected_cols %>% filter(!grepl("mri|pps01|macv01|freesqc01|abcd_ypsq101|medsy01|pmq01", table_name))
selected_cols <- selected_cols %>% filter(!grepl("mri", Aliases))
selected_cols <- selected_cols %>% filter(!grepl(";", ValueRange))
selected_cols <- selected_cols %>% filter(!grepl("Raw Score|Missing Answers|Total Questions", ElementDescription))
# tack dhx01 back on
dhx01 <-  abcd_dict %>% filter(table_name == "dhx01" &
!grepl("GUID|Date", DataType) &
!grepl("src_subject_id|interview_age|sex|visit|select_language", ElementName) &
!grepl("Yes", Notes) &
!grepl("Medication|Drug", ElementDescription))  # can't use questions related to Medication 1-4 or Drug 1-4 bc we have to know drug name, which is a String
selected_cols <- rbind(selected_cols, dhx01)
selected_cols <- selected_cols %>% filter(!grepl("kbi_p_c_best_friend_len", ElementName))
selected_cols <- selected_cols %>% filter(!grepl("kbi_p_c_reg_friend_group_len", ElementName))
# tack 1 row from medsy01 back on why am i doing this
medsy01 <-  abcd_dict %>% filter(table_name == "medsy01" &
grepl("caff_ago", ElementName))
selected_cols <- rbind(selected_cols, medsy01)
additional_desired_cols <- c("subjectid", "src_subject_id", "eventname")
aliases <- data.frame(str_split(selected_cols$Aliases, ",", simplify=TRUE))
librarian::shelf("data.table", "R.utils", "tidyverse",
"tidyr", "stringr", "tibble",
"corrplot", "Hmisc", "ggplot2",
"RColorBrewer", "rvest", "utils",
"futile.logger", "renv")
renv::purge(stringr)
renv::install(stringr)
install.packages("stringr")
librarian::shelf("data.table", "R.utils", "tidyverse",
"tidyr", "stringr", "tibble",
"corrplot", "Hmisc", "ggplot2",
"RColorBrewer", "rvest", "utils",
"futile.logger", "renv")
aliases <- data.frame(str_split(selected_cols$Aliases, ",", simplify=TRUE))
renv::rebuild()
renv::install("jsonlite")
# grab columns of relevance
selected_cols <-  abcd_dict %>% filter(DataType == "Float" |
ElementName == "anthroheightcalc|anthroweightcalc" |
# grepl("_t$", ElementName) |  # there's a lot of ElementNames that end in _t that aren't t_scores and I only want t_scores
grepl("t-score|T-Score|T-score|Mean|mean", ElementDescription) |
ElementDescription %like% "how much|How much|how many|How many|how long|How long" |
table_name == "abcd_otbi01" & grepl("age|old", ElementDescription) |
table_name == "abcd_ps01" & DataType=="Integer" |
table_name == "abcd_saiq02" & grepl("how many years", ElementDescription) |
table_name == "abcd_tbi01" & grepl("SUM", ElementDescription) |
# table_name == "abcd_tbss01" & grepl("agecorrected", ElementName)  # they computed T-scores later
table_name == "abcd_y10ids01" & grepl("How many times", ElementDescription) |
table_name == "abcd_yhr01" & grepl("ng/10 mg hair", ElementDescription) |
table_name == "stq01" & grepl("ng/10 mg hair", ElementDescription)
# table_name == "abcd_yrb01" & grepl("how many", ElementDescription) |
# table_name == "abcd_ysr01" & grepl("how many", ElementDescription)
)
# filter out MRI and other variables that are not float/numerical
selected_cols <- selected_cols %>% filter(!grepl("mri|ehi_y_ss_scoreb|rep1|rep2|rep3|hair_results_lan|hair_results_entityid|hair_results_clientcode|hair_results_section_begin|hair_results_section_end|_nt$|_nm$", ElementName))
selected_cols <- selected_cols %>% filter(!grepl("mri|pps01|macv01|freesqc01|abcd_ypsq101|medsy01|pmq01", table_name))
selected_cols <- selected_cols %>% filter(!grepl("mri", Aliases))
selected_cols <- selected_cols %>% filter(!grepl(";", ValueRange))
selected_cols <- selected_cols %>% filter(!grepl("Raw Score|Missing Answers|Total Questions", ElementDescription))
# tack dhx01 back on
dhx01 <-  abcd_dict %>% filter(table_name == "dhx01" &
!grepl("GUID|Date", DataType) &
!grepl("src_subject_id|interview_age|sex|visit|select_language", ElementName) &
!grepl("Yes", Notes) &
!grepl("Medication|Drug", ElementDescription))  # can't use questions related to Medication 1-4 or Drug 1-4 bc we have to know drug name, which is a String
selected_cols <- rbind(selected_cols, dhx01)
selected_cols <- selected_cols %>% filter(!grepl("kbi_p_c_best_friend_len", ElementName))
selected_cols <- selected_cols %>% filter(!grepl("kbi_p_c_reg_friend_group_len", ElementName))
# tack 1 row from medsy01 back on why am i doing this
medsy01 <-  abcd_dict %>% filter(table_name == "medsy01" &
grepl("caff_ago", ElementName))
selected_cols <- rbind(selected_cols, medsy01)
additional_desired_cols <- c("subjectid", "src_subject_id", "eventname")
aliases <- data.frame(str_split(selected_cols$Aliases, ",", simplify=TRUE))
install.packages("librarian")
librarian::shelf("data.table", "R.utils", "tidyverse",
"tidyr", "stringr", "tibble",
"corrplot", "Hmisc", "ggplot2",
"RColorBrewer", "rvest", "utils",
"futile.logger", "renv")
aliases <- data.frame(str_split(selected_cols$Aliases, ",", simplify=TRUE))
aliases
selected_cols_names_only <- c(additional_desired_cols, selected_cols$ElementName, selected_cols$Notes, selected_cols$Condition, selected_cols$Aliases, aliases$X1, aliases$X2)
selected_cols_names_only <- unique(selected_cols_names_only[selected_cols_names_only != ""])
renv::snapshot()
